// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  eventTags  EventTag[]
  tagFollows TagFollow[]
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  email    String   @unique
  token    String   @unique
  image    String?
  adult    Boolean
  birthday DateTime
  roleId   Int

  role            Role             @relation(fields: [roleId], references: [id])
  comments        Comment[]
  events          Event[]
  tagFollows      TagFollow[]
  eventSubscribes EventSubscribe[]
  eventNotes      EventNote[]
}

model Comment {
  id       Int    @id @default(autoincrement())
  eventId  Int
  userId   Int
  content  String
  parentId Int? // pour commenter sur un autre commentaire

  event   Event     @relation(fields: [eventId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
  replies Comment[] @relation("CommentReplies")
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
}

model Event {
  id            Int      @id @default(autoincrement())
  userId        Int
  createdAt     DateTime
  updatedAt     DateTime
  publishAt     DateTime
  published     Boolean
  title         String
  description   String
  image         Json?
  linkTicketing String?
  adult         Boolean
  isValid       Boolean

  user               User                @relation(fields: [userId], references: [id])
  comments           Comment[]
  eventTags          EventTag[]
  eventNetworks      EventNetwork[]
  eventLocalizations EventLocalization[]
  eventSubscribes    EventSubscribe[]
  eventNotes         EventNote[]
}

model EventTag {
  id      Int @id @default(autoincrement())
  eventId Int
  tagId   Int

  event Event @relation(fields: [eventId], references: [id])
  tag   Tag   @relation(fields: [tagId], references: [id])
}

model EventNetwork {
  id        Int    @id @default(autoincrement())
  networkId Int
  eventId   Int
  link      String

  event   Event   @relation(fields: [eventId], references: [id])
  network Network @relation(fields: [networkId], references: [id])
}

model Network {
  id   Int    @id @default(autoincrement())
  name String

  eventNetworks EventNetwork[]
}

model EventLocalization {
  id         Int    @id @default(autoincrement())
  eventId    Int
  address    String
  city       String
  zipCode    Int
  regionName String
  latitude   Float
  longitude  Float

  event Event @relation(fields: [eventId], references: [id])
}

model TagFollow {
  id     Int @id @default(autoincrement())
  userId Int
  tagId  Int

  user User @relation(fields: [userId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])
}

model EventSubscribe {
  id      Int    @id @default(autoincrement())
  userId  Int
  eventId Int
  type    String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model EventNote {
  id      Int @id @default(autoincrement())
  eventId Int
  userId  Int
  value   Int

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}
